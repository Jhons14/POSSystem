services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pos-postgres
    environment:
      POSTGRES_DB: posdb
      POSTGRES_USER: posuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_production}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d/
    networks:
      - pos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U posuser -d posdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pos-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      PORT: 8080
      DATABASE_DEV_URL: jdbc:postgresql://postgres:5432/posdb
      DATABASE_DEV_USERNAME: posuser
      DATABASE_DEV_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_production}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/posdb
      SPRING_DATASOURCE_USERNAME: posuser
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_production}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pos-network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/pos/server/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_SERVER_URL: ${VITE_SERVER_URL:-http://localhost:8080/pos/server/api}
    container_name: pos-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - pos-network

  # Redis for rate limiting (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: pos-redis
    ports:
      - "6379:6379"
    networks:
      - pos-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pos-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs: